package traceID

import (
	"bytes"
	"encoding/json"
	"flag"
	"fmt"
	"io"
	"net"
	"testing"

	"github.com/koykov/bytealg"
	"github.com/koykov/traceID/marshaller"
)

type testM8r struct{}

func (m testM8r) Marshal(rw io.ReadWriter, x interface{}, indent bool) (b []byte, err error) {
	e := json.NewEncoder(rw)
	if indent {
		e.SetIndent("", "\t")
	}
	if err = e.Encode(x); err != nil {
		return
	}
	b, err = io.ReadAll(rw)
	b = bytealg.TrimRight(b, []byte{'\n'})
	return
}

var pb = flag.Bool("print-bytes", false, "print encoded bytes in hex table format")

func printBytes(p []byte) {
	for i := 0; i < len(p); i++ {
		if i > 0 && i%16 == 0 {
			fmt.Print("\n")
		}
		fmt.Printf("0x%02x, ", p[i])
	}
}

func TestEndec(t *testing.T) {
	var encoded = []byte{
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x48, 0x38, 0x62, 0x71,
		0x63, 0x34, 0x71, 0x47, 0x57, 0x71, 0x65, 0x34, 0x32, 0x6d, 0x62, 0x33, 0x07, 0x00, 0x64, 0x65,
		0x66, 0x61, 0x75, 0x6c, 0x74, 0x08, 0x00, 0x02, 0x04, 0xc8, 0x0f, 0x5f, 0xa3, 0x1c, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0xc8, 0x0f, 0x5f, 0xa3, 0x1c,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0xc8, 0x0f, 0x5f,
		0xa3, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00,
		0x00, 0x0d, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x01, 0x00, 0xc8,
		0x0f, 0x5f, 0xa3, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
		0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xc8, 0x0f, 0x5f, 0xa3, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x2f, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00,
		0x00, 0x01, 0x00, 0xc8, 0x0f, 0x5f, 0xa3, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x3e,
		0x00, 0x00, 0x00, 0x01, 0x00, 0xc8, 0x0f, 0x5f, 0xa3, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00,
		0x00, 0x8b, 0x00, 0x00, 0x00, 0x01, 0x00, 0xc8, 0x0f, 0x5f, 0xa3, 0x1c, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x4d,
		0x03, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x4d, 0x03, 0x00, 0x00, 0x66, 0x6f, 0x6f, 0x62, 0x61,
		0x72, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
		0x31, 0x32, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x32, 0x33, 0x2e, 0x31, 0x34, 0x31,
		0x35, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x33, 0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72,
		0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x34, 0x7b, 0x0a, 0x09, 0x22, 0x61, 0x22, 0x3a,
		0x20, 0x31, 0x32, 0x33, 0x2c, 0x0a, 0x09, 0x22, 0x62, 0x22, 0x3a, 0x20, 0x34, 0x35, 0x36, 0x2e,
		0x37, 0x38, 0x39, 0x2c, 0x0a, 0x09, 0x22, 0x63, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x63, 0x58, 0x64,
		0x6c, 0x63, 0x6e, 0x52, 0x35, 0x22, 0x2c, 0x0a, 0x09, 0x22, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x61,
		0x73, 0x64, 0x66, 0x67, 0x68, 0x22, 0x2c, 0x0a, 0x09, 0x22, 0x65, 0x22, 0x3a, 0x20, 0x74, 0x72,
		0x75, 0x65, 0x0a, 0x7d, 0x69, 0x70, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x6c,
		0x6f, 0x72, 0x65, 0x6d, 0x34, 0x43, 0x20, 0x36, 0x46, 0x20, 0x37, 0x32, 0x20, 0x36, 0x35, 0x20,
		0x36, 0x44, 0x20, 0x32, 0x30, 0x20, 0x36, 0x39, 0x20, 0x37, 0x30, 0x20, 0x37, 0x33, 0x20, 0x37,
		0x35, 0x20, 0x36, 0x44, 0x20, 0x32, 0x30, 0x20, 0x36, 0x34, 0x20, 0x36, 0x46, 0x20, 0x36, 0x43,
		0x20, 0x36, 0x46, 0x20, 0x37, 0x32, 0x20, 0x32, 0x30, 0x20, 0x37, 0x33, 0x20, 0x36, 0x39, 0x20,
		0x37, 0x34, 0x20, 0x32, 0x30, 0x20, 0x36, 0x31, 0x20, 0x36, 0x44, 0x20, 0x36, 0x35, 0x20, 0x37,
		0x34, 0x20, 0x32, 0x43, 0x20, 0x32, 0x30, 0x20, 0x36, 0x33, 0x20, 0x36, 0x46, 0x20, 0x36, 0x45,
		0x20, 0x37, 0x33, 0x20, 0x36, 0x35, 0x20, 0x36, 0x33, 0x20, 0x37, 0x34, 0x20, 0x36, 0x35, 0x20,
		0x37, 0x34, 0x20, 0x37, 0x35, 0x20, 0x37, 0x32, 0x20, 0x32, 0x30, 0x20, 0x36, 0x31, 0x20, 0x36,
		0x34, 0x20, 0x36, 0x39, 0x20, 0x37, 0x30, 0x20, 0x36, 0x39, 0x20, 0x37, 0x33, 0x20, 0x36, 0x33,
		0x20, 0x36, 0x39, 0x20, 0x36, 0x45, 0x20, 0x36, 0x37, 0x20, 0x32, 0x30, 0x20, 0x36, 0x35, 0x20,
		0x36, 0x43, 0x20, 0x36, 0x39, 0x20, 0x37, 0x34, 0x20, 0x32, 0x45, 0x20, 0x32, 0x30, 0x20, 0x34,
		0x33, 0x20, 0x37, 0x35, 0x20, 0x37, 0x32, 0x20, 0x36, 0x31, 0x20, 0x36, 0x32, 0x20, 0x36, 0x39,
		0x20, 0x37, 0x34, 0x20, 0x37, 0x35, 0x20, 0x37, 0x32, 0x20, 0x32, 0x30, 0x20, 0x37, 0x33, 0x20,
		0x36, 0x35, 0x20, 0x36, 0x34, 0x20, 0x32, 0x30, 0x20, 0x36, 0x43, 0x20, 0x36, 0x39, 0x20, 0x36,
		0x32, 0x20, 0x36, 0x35, 0x20, 0x37, 0x32, 0x20, 0x36, 0x46, 0x20, 0x32, 0x30, 0x20, 0x36, 0x31,
		0x20, 0x37, 0x34, 0x20, 0x32, 0x30, 0x20, 0x36, 0x44, 0x20, 0x36, 0x35, 0x20, 0x37, 0x34, 0x20,
		0x37, 0x35, 0x20, 0x37, 0x33, 0x20, 0x32, 0x30, 0x20, 0x36, 0x43, 0x20, 0x37, 0x35, 0x20, 0x36,
		0x33, 0x20, 0x37, 0x34, 0x20, 0x37, 0x35, 0x20, 0x37, 0x33, 0x20, 0x36, 0x39, 0x20, 0x36, 0x45,
		0x20, 0x37, 0x34, 0x20, 0x36, 0x35, 0x20, 0x37, 0x32, 0x20, 0x36, 0x34, 0x20, 0x37, 0x35, 0x20,
		0x36, 0x44, 0x20, 0x32, 0x30, 0x20, 0x37, 0x35, 0x20, 0x37, 0x34, 0x20, 0x32, 0x30, 0x20, 0x36,
		0x31, 0x20, 0x36, 0x33, 0x20, 0x32, 0x30, 0x20, 0x36, 0x35, 0x20, 0x36, 0x43, 0x20, 0x36, 0x39,
		0x20, 0x37, 0x34, 0x20, 0x32, 0x45, 0x20, 0x32, 0x30, 0x20, 0x34, 0x44, 0x20, 0x36, 0x31, 0x20,
		0x36, 0x35, 0x20, 0x36, 0x33, 0x20, 0x36, 0x35, 0x20, 0x36, 0x45, 0x20, 0x36, 0x31, 0x20, 0x37,
		0x33, 0x20, 0x32, 0x30, 0x20, 0x36, 0x45, 0x20, 0x36, 0x46, 0x20, 0x36, 0x45, 0x20, 0x32, 0x30,
		0x20, 0x37, 0x34, 0x20, 0x37, 0x35, 0x20, 0x37, 0x32, 0x20, 0x37, 0x30, 0x20, 0x36, 0x39, 0x20,
		0x37, 0x33, 0x20, 0x32, 0x30, 0x20, 0x36, 0x35, 0x20, 0x37, 0x33, 0x20, 0x37, 0x34, 0x20, 0x32,
		0x45, 0x20, 0x32, 0x30, 0x20, 0x35, 0x30, 0x20, 0x36, 0x35, 0x20, 0x36, 0x43, 0x20, 0x36, 0x43,
		0x20, 0x36, 0x35, 0x20, 0x36, 0x45, 0x20, 0x37, 0x34, 0x20, 0x36, 0x35, 0x20, 0x37, 0x33, 0x20,
		0x37, 0x31, 0x20, 0x37, 0x35, 0x20, 0x36, 0x35, 0x20, 0x32, 0x30, 0x20, 0x36, 0x38, 0x20, 0x36,
		0x31, 0x20, 0x36, 0x32, 0x20, 0x36, 0x39, 0x20, 0x37, 0x34, 0x20, 0x36, 0x31, 0x20, 0x36, 0x45,
		0x20, 0x37, 0x34, 0x20, 0x32, 0x30, 0x20, 0x36, 0x44, 0x20, 0x36, 0x46, 0x20, 0x37, 0x32, 0x20,
		0x36, 0x32, 0x20, 0x36, 0x39, 0x20, 0x32, 0x30, 0x20, 0x37, 0x34, 0x20, 0x37, 0x32, 0x20, 0x36,
		0x39, 0x20, 0x37, 0x33, 0x20, 0x37, 0x34, 0x20, 0x36, 0x39, 0x20, 0x37, 0x31, 0x20, 0x37, 0x35,
		0x20, 0x36, 0x35, 0x20, 0x32, 0x30, 0x20, 0x37, 0x33, 0x20, 0x36, 0x35, 0x20, 0x36, 0x45, 0x20,
		0x36, 0x35, 0x20, 0x36, 0x33, 0x20, 0x37, 0x34, 0x20, 0x37, 0x35, 0x20, 0x37, 0x33, 0x20, 0x32,
		0x30, 0x20, 0x36, 0x35, 0x20, 0x37, 0x34, 0x20, 0x32, 0x30, 0x20, 0x36, 0x45, 0x20, 0x36, 0x35,
		0x20, 0x37, 0x34, 0x20, 0x37, 0x35, 0x20, 0x37, 0x33, 0x20, 0x32, 0x30, 0x20, 0x36, 0x35, 0x20,
		0x37, 0x34, 0x20, 0x36, 0x44, 0x20, 0x36, 0x31, 0x20, 0x36, 0x43, 0x20, 0x36, 0x35, 0x20, 0x37,
		0x33, 0x20, 0x37, 0x35, 0x20, 0x36, 0x31, 0x20, 0x36, 0x34, 0x20, 0x36, 0x31, 0x20, 0x32, 0x30,
		0x20, 0x36, 0x36, 0x20, 0x36, 0x31, 0x20, 0x36, 0x44, 0x20, 0x36, 0x35, 0x20, 0x37, 0x33, 0x20,
		0x32, 0x30, 0x20, 0x36, 0x31, 0x20, 0x36, 0x33, 0x20, 0x32, 0x30, 0x20, 0x37, 0x34, 0x20, 0x37,
		0x35, 0x20, 0x37, 0x32, 0x20, 0x37, 0x30, 0x20, 0x36, 0x39, 0x20, 0x37, 0x33, 0x20, 0x32, 0x30,
		0x20, 0x36, 0x35, 0x20, 0x36, 0x37, 0x20, 0x36, 0x35, 0x20, 0x37, 0x33, 0x20, 0x37, 0x34, 0x20,
		0x36, 0x31, 0x20, 0x37, 0x33, 0x20, 0x32, 0x45,
	}
	t.Run("encode", func(t *testing.T) {
		var buf bytes.Buffer
		_, _ = buf.WriteString("foobar")
		ip := net.ParseIP("127.0.0.1")
		lorem := "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur sed libero at metus luctus" +
			"interdum ut ac elit. Maecenas non turpis est. Pellentesque habitant morbi tristique senectus et netus et" +
			"malesuada fames ac turpis egestas."

		ctx := NewCtx()
		ctx.SetClock(DummyClock{}).
			SetMarshaller(testM8r{}).
			SetService("default").
			SetStage("foobar").
			SetID("H8bqc4qGWqe42mb3").
			Info("example").
			Var("example_1", 2).
			Var("example_2", 3.1415).
			Var("example_3", &buf).
			Var("example_4", struct {
				A int32   `json:"a"`
				B float64 `json:"b"`
				C []byte  `json:"cl"`
				D string  `json:"d"`
				E bool    `json:"e"`
			}{
				A: 123,
				B: 456.789,
				C: []byte("qwerty"),
				D: "asdfgh",
				E: true,
			}).With(OptionIndent, true).
			Var("ip", ip).
			Var("lorem", lorem).With(OptionMarshaller, marshaller.Binary{})
		cb := Encode(ctx)
		if *pb {
			printBytes(cb)
		}
		if !bytes.Equal(cb, encoded) {
			t.FailNow()
		}
	})
	t.Run("decode", func(t *testing.T) {
		var x Message
		if err := Decode(encoded, &x); err != nil {
			t.Error(err)
		}
		if x.ID != "H8bqc4qGWqe42mb3" {
			t.Error("ID mismatch")
		}
		if x.Service != "default" {
			t.Error("service mismatch")
		}
		if len(x.Rows) != 8 {
			t.FailNow()
		}
		if x.Rows[4].Type != EntryLog {
			t.FailNow()
		}
		if x.Rows[4].Time != 123000000456 {
			t.FailNow()
		}
		if lo, hi := x.Rows[4].Key.Decode(); string(x.Buf[lo:hi]) != "example_3" {
			t.FailNow()
		}
		if lo, hi := x.Rows[4].Value.Decode(); string(x.Buf[lo:hi]) != "foobar" {
			t.FailNow()
		}
	})
}
